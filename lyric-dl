#!/usr/bin/env phantomjs

var system = require('system')
var fs = require('fs');
var common = require(phantom.libraryPath + '/core/common.js')
var minimist = require(phantom.libraryPath + '/core/minimist.js')

function download(opt, url, response) {
    if (url.indexOf('http://music.163.com/#/m/song?id=') != -1) {
        var m = url.match(/id=(\d+)/)

        if (!m || m.length != 2) {
            console.log("invalid url")
            phantom.exit(2)
        }

        var ntes = require(phantom.libraryPath + '/core/downloader/ntes.js')
        ntes.download(m[1], response)
    } else  {
        console.log("invalid url")
        phantom.exit(2)
    }
}

var handler = {}

handler.help = function (opt) {
    console.log("\
Usage: lyric-dl [cmd [arg [arg ...]]] [OPTIONS]\n\
\n\
command: url - download lyric:\n\
\n\
    SUPPORT: \n\
    * cloudmusic: http://music.163.com/#/m/song?id=<ID> \n\
\n\
    OPTIONS: \n\
    -o --output=<file>          name of output file, if translate lyric exists, named: <file>.tr\n\
    -O --out-format=<format>    output file in given format: <format>=[lrc, json]\n\
\n\
samples: lyric-dl url <URL> -o download\n\
")
    phantom.exit(0)
}

handler.url = function (opt) {
    if (args['_'].length < 3) {
        console.log("nothing to do")
        phantom.exit(2)
    }

    download(opt, args['_'][2], function(result) {
        var outfile = opt['o'] || opt['output'] || result['name']
        var outformat = opt['O'] || opt['out-format'] || 'lrc'

        switch (outformat)
        {
            case 'lrc':
                fs.write(outfile, result['lrc'], 'w')
                if (result['tlrc'])
                    fs.write(outfile + '.tr', result['tlrc'], 'w')
                break
            case 'json':
                fs.write(outfile, JSON.stringify(result), 'w')
                break
            default:
                console.log("invalid out format: " + outformat)
                phantom.exit(2)
                break
        }
        
        phantom.exit(0)
    })
}

var args = minimist.parse(system.args)

var cmd = args['_'][1]

if (args['h'] || args['help']) {
    cmd = 'help'
}

if (cmd != 'help' && args['_'].length < 2) {
    console.log("nothing to do")
    phantom.exit(2)
}

var f = handler[cmd]

if (f) {
    f(args)
} else {
    common.errorExit("unknown command : " + args['_'][1])
}
